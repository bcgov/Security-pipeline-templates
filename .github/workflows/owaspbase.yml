env: 
  TARGET_URL: 'http://www.itsecgames.com/' # Set env variable for the target website for OWASP to scan

name: 'OWASP Baseline Scan Template'
on:
 #branches:
 # -main
 # -releases/XX
 #branches-ignore:
 # -main
 # -releases/XX
 #tags-ignore:
 # -v1.
 #paths-ignore:
 # - 'docs/**'
  push: #Any push will trigger this action
    branches: [ master ]
  pull_request: #Any Pull Request will trigger this action
    branches: [ mybranch ]
  schedule:
    # Layout of cron schedule.  'minute hour day(month) month day(week)'
    # Schedule option to review code at rest for possible net-new threats/CVE's
    # List of Cron Schedule Examples can be found at https://crontab.guru/examples.html
    # Top of Every Hour ie: 17:00:00. '0 * * * *'
    # Midnight Daily ie: 00:00:00. '0 0 * * *'
    # 12AM UTC --> 8PM EST. '0 0 * * *'
    # Midnight Friday. '0 0 * * FRI'
    # Once a week at midnight Sunday. '0 0 * * 0'
    # First day of the month at midnight. '0 0 1 * *'
    # Every Quarter. '0 0 1 */3 *'
    # Every 6 months. '0 0 1 */6 *'
    # Every Year. '0 0 1 1 *' 
    - cron: '0 0 * * *'
#Begin Job of scanning the website, 
jobs:
  zap_scan:
    runs-on: ubuntu-latest
    name: Scan the webapplication
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
        #Baseline Zap Scan
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.4.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: ${{ env.TARGET_URL }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -d' # -a enables alpha active and passive scan rules. -d shows debug messages, can be removed after testing
          issue_title: OWAP Baseline
