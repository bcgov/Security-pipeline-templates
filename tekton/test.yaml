apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: p-react-build
spec:
  params:
  - description: Name of App that will be deployed.
    name: appName
    type: string
  - description: The git repository URL to clone from.
    name: repoUrl
    type: string
  - description: The git branch to clone.
    name: branchName
    type: string
  - name: pathToContext
    type: string
  tasks:
  - name: fetch-repo
    params:
    - name: url
      value: $(params.repoUrl)
    - name: revision
      value: $(params.branchName)
    taskRef:
      name: t-git-clone
    workspaces:
    - name: output
      workspace: shared-data
  - name: react-build
    params:
    - name: APP_NAME
      value: $(params.appName)
    - name: CONTEXT_DIR
      value: $(params.pathToContext)
    runAfter:
    - fetch-repo
    taskRef:
      name: t-react-build
    workspaces:
    - name: source
      workspace: shared-data
  - name: react-deploy
    params:
    - name: APP_NAME
      value: $(params.appName)
    runAfter:
    - react-build
    taskRef:
      name: t-react-deploy
  workspaces:
  - description: |
      This workspace will receive the cloned git repo and be passed
      to the next Task for the repo's README.md file to be read.
    name: shared-data
  - description: |
      This workspace will provide ssh credentials to the git-clone task.
    name: ssh-creds
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Git
    tekton.dev/displayName: git clone
    tekton.dev/pipelines.minVersion: 0.21.0
    tekton.dev/tags: git
  labels:
    app.kubernetes.io/version: "0.4"
  name: t-git-clone
spec:
  description: "These Tasks are Git tasks to work with repositories used by other
    tasks in your Pipeline.\nThe git-clone Task will clone a repo from the provided
    url into the output Workspace. By default the repo will be cloned into the root
    of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory
    param. "
  params:
  - description: Repository URL to clone from.
    name: url
    type: string
  - default: ""
    description: Revision to checkout. (branch, tag, sha, ref, etc...)
    name: revision
    type: string
  - default: ""
    description: Refspec to fetch before checking out revision.
    name: refspec
  - default: "true"
    description: Initialize and fetch git submodules.
    name: submodules
    type: string
  - default: "1"
    description: Perform a shallow clone, fetching only the most recent N commits.
    name: depth
    type: string
  - default: "true"
    description: Set the `http.sslVerify` global git config. Setting this to `false`
      is not advised unless you are sure that you trust your git remote.
    name: sslVerify
    type: string
  - default: ""
    description: Subdirectory inside the `output` Workspace to clone the repo into.
    name: subdirectory
    type: string
  - default: "true"
    description: Clean out the contents of the destination directory if it already
      exists before cloning.
    name: deleteExisting
    type: string
  - default: ""
    description: HTTP proxy server for non-SSL requests.
    name: httpProxy
    type: string
  - default: ""
    description: HTTPS proxy server for SSL requests.
    name: httpsProxy
    type: string
  - default: ""
    description: Opt out of proxying HTTP/HTTPS requests.
    name: noProxy
    type: string
  - default: "true"
    description: Log the commands that are executed during `git-clone`'s operation.
    name: verbose
    type: string
  - default: docker.io/michaelin/github-cli:latest
    description: The image providing the git-init binary that this Task runs.
    name: gitInitImage
    type: string
  - default: /tekton/home
    description: |
      Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
      the gitInitImage param with an image containing custom user configuration.
    name: userHome
    type: string
  - default: github-pat-token
    description: The name of the secret that has your github PAT
    name: github-secret
    type: string
  results:
  - description: The precise commit SHA that was fetched by this Task.
    name: commit
  - description: The precise URL that was fetched by this Task.
    name: url
  steps:
  - env:
    - name: HOME
      value: $(params.userHome)
    - name: PARAM_URL
      value: $(params.url)
    - name: PARAM_REVISION
      value: $(params.revision)
    - name: PARAM_REFSPEC
      value: $(params.refspec)
    - name: PARAM_SUBMODULES
      value: $(params.submodules)
    - name: PARAM_DEPTH
      value: $(params.depth)
    - name: PARAM_SSL_VERIFY
      value: $(params.sslVerify)
    - name: PARAM_SUBDIRECTORY
      value: $(params.subdirectory)
    - name: PARAM_DELETE_EXISTING
      value: $(params.deleteExisting)
    - name: PARAM_VERBOSE
      value: $(params.verbose)
    - name: PARAM_USER_HOME
      value: $(params.userHome)
    - name: PARAM_GITHUB_PAT
      valueFrom:
        secretKeyRef:
          key: github-pat-token
          name: $(params.github-secret)
    - name: WORKSPACE_OUTPUT_PATH
      value: $(workspaces.output.path)
    image: $(params.gitInitImage)
    name: clone
    script: |-
      #!/usr/bin/env sh

      # git login
      echo "GH CLI Auth"
      echo ${PARAM_GITHUB_PAT}
      echo $PARAM_GITHUB_PAT > token.txt
      gh auth login --with-token < token.txt
      rm token.txt
      gh auth status

      cleandir() {
        # Delete any existing contents of the repo directory if it exists.
        #
        # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
        # or the root of a mounted volume.
        if [ -d "${CHECKOUT_DIR}" ] ; then
          # Delete non-hidden files and directories
          rm -rf "${CHECKOUT_DIR:?}"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "${CHECKOUT_DIR}"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "${CHECKOUT_DIR}"/..?*
        fi
      }

      if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
        cleandir
      fi

      CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

      # echo ${PARAM_URL}
      # echo ${CHECKOUT_DIR}
      # echo ${PARAM_REVISION}

      NOTE that if we use PAT, the url must be HTTPS not ssh
      gh repo clone ${PARAM_URL} ${CHECKOUT_DIR} -- --branch ${PARAM_REVISION}

      cd "${CHECKOUT_DIR}"
      RESULT_SHA="$(git rev-parse HEAD)"
      EXIT_CODE="$?"
      if [ "${EXIT_CODE}" != 0 ] ; then
        exit "${EXIT_CODE}"
      fi
      printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
      printf "%s" "${PARAM_URL}" > "$(results.url.path)"
  workspaces:
  - description: The git repo will be cloned onto the volume backing this Workspace.
    name: output
  - description: |
      A Workspace containing a .gitconfig and .git-credentials file. These
      will be copied to the user's home before any git commands are run. Any
      other files in this Workspace are ignored. It is strongly recommended
      to use github PAT over basic-auth whenever possible and to bind a
      Secret to this Workspace over other volume types.
    name: basic-auth
    optional: true
  - description: |
      A github personal access token that allow openshift to pull the code from
      github.
    name: githubPAToken
    optional: true
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Build Tools
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: linux/amd64,linux/s390x,linux/ppc64le
    tekton.dev/tags: build-tool
  labels:
    app.kubernetes.io/version: "0.2"
  name: t-react-build
spec:
  description: This Task can be used to run a Maven build.
  params:
  - name: APP_NAME
    type: string
  - default: .
    description: The context directory within the repository for sources on which
      we want to execute maven goals.
    name: CONTEXT_DIR
    type: string
  steps:
  - args:
    - --incremental
    - $(params.CONTEXT_DIR)
    - /tmp/build
    - $(params.APP_NAME)
    command:
    - /usr/libexec/s2i/run
    image: quay.io/openshift/origin-nodejs:14
    name: build
  workspaces:
  - description: The workspace consisting of maven project.
    name: source
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: t-react-deploy
spec:
  params:
  - name: APP_NAME
    type: string
  - name: imageLocation
    type: string
  steps:
  - args:
    - |
      oc new-app $(params.imageLocation) --name=$(params.APP_NAME )
      oc expose svc/$(params.APP_NAME)
    command:
    - /bin/sh
    - -c
    image: quay.io/openshift/origin-cli:latest
    name: deploy
